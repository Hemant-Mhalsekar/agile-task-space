
import React, { useState } from 'react';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/components/ui/use-toast';
import { Shield, Copy, Check } from 'lucide-react';

export const TwoFactorSetup: React.FC = () => {
  const [step, setStep] = useState<'start' | 'qrcode' | 'verify'>('start');
  const [verificationCode, setVerificationCode] = useState('');
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();
  
  // This would be generated by the server in a real implementation
  const mockSecretKey = 'ABCD1234EFGH5678';
  
  const handleStart = () => {
    setStep('qrcode');
  };
  
  const handleCopySecret = () => {
    navigator.clipboard.writeText(mockSecretKey);
    setCopied(true);
    
    toast({
      title: "Secret copied",
      description: "The secret key has been copied to your clipboard",
    });
    
    setTimeout(() => setCopied(false), 2000);
  };
  
  const handleVerify = () => {
    if (verificationCode.length === 6) {
      // In a real app, this would validate with the server
      toast({
        title: "2FA Enabled",
        description: "Two-factor authentication has been enabled for your account",
      });
      setStep('start');
    } else {
      toast({
        title: "Invalid code",
        description: "Please enter a valid 6-digit verification code",
        variant: "destructive",
      });
    }
  };
  
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Shield className="h-5 w-5 mr-2 text-primary" />
          Two-Factor Authentication
        </CardTitle>
        <CardDescription>
          Add an extra layer of security to your account
        </CardDescription>
      </CardHeader>
      <CardContent>
        {step === 'start' && (
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              Two-factor authentication adds an additional layer of security to your account by requiring more than just a password to sign in.
            </p>
            <div className="flex flex-col space-y-2">
              <h4 className="font-medium">With 2FA enabled, you'll need:</h4>
              <ul className="list-disc pl-5 text-sm text-muted-foreground space-y-1">
                <li>Your password</li>
                <li>Access to your authentication app</li>
              </ul>
            </div>
            <Button onClick={handleStart}>Enable 2FA</Button>
          </div>
        )}
        
        {step === 'qrcode' && (
          <div className="space-y-4">
            <div className="space-y-2">
              <h4 className="font-medium">1. Scan QR code or enter secret key</h4>
              <p className="text-sm text-muted-foreground">
                Use an authentication app like Google Authenticator, Authy, or Microsoft Authenticator to scan the QR code.
              </p>
            </div>
            
            <div className="flex justify-center p-4 bg-muted rounded-lg">
              {/* In a real app, this would be an actual QR code */}
              <div className="w-40 h-40 bg-white flex items-center justify-center">
                <div className="text-xs text-center text-black">
                  QR Code<br />(Mock visualization)
                </div>
              </div>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-medium">Secret key</h4>
              <div className="flex items-center space-x-2">
                <code className="flex-1 p-2 bg-muted rounded text-sm font-mono">
                  {mockSecretKey}
                </code>
                <Button 
                  size="icon" 
                  variant="outline" 
                  onClick={handleCopySecret}
                >
                  {copied ? (
                    <Check className="h-4 w-4" />
                  ) : (
                    <Copy className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
            
            <div className="space-y-2 pt-4">
              <h4 className="font-medium">2. Enter verification code</h4>
              <p className="text-sm text-muted-foreground">
                Enter the 6-digit code from your authentication app.
              </p>
              
              <div className="flex flex-col space-y-2">
                <Label htmlFor="verification-code">Verification Code</Label>
                <div className="flex space-x-2">
                  <Input 
                    id="verification-code"
                    value={verificationCode}
                    onChange={(e) => setVerificationCode(e.target.value)}
                    placeholder="123456"
                    maxLength={6}
                  />
                  <Button onClick={handleVerify}>Verify</Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
